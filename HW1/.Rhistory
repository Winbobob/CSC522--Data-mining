Cheby.dist <- sort(Cheby.dist, decreasing = FALSE)
#Cosine distance
cos.dist <- c()
for (i in 1:nrow(diff.dist)) {
numerator <- sum(locations.matrix[i,] * P)
denominator <- sqrt(sum(locations.matrix[i,] * locations.matrix[i,])) * sqrt(sum(P * P))
cos.dist[i] <- 1 - numerator / denominator
}
cos.dist <- sort(cos.dist, decreasing = FALSE)
#(d.b) For each distance measure, identify the 10 points from the dataset that are the closest to the point P
#(d.b.a) Create plots, one for each distance measure. Place an ’X’ for
#P and mark the 10 closest points. To mark them, you could place a circle
#or draw the line between these closest neighbors and the points ’X’. Make
#sure the points can be uniquely identified.
#(d.b.b) Verify if the set of points is the same across all the distance
#measures.
#(a) Load the file and read âlatâ and âlongâ columns.
loc_data <- read.csv("locations.csv")
lat <- loc_data$lat
long <- loc_data$long
#(b)Make a 2D plot and label the axes (latitude should be x-axis
#   and longitude should be y-axis)
plot(lat,long, xlab = "latitude", ylab = "longitude")
#(c) Find the correlation between the dimensions
cor(lat,long)
#(d) Compute the mean of latitude and longitude values. Consider this point as P.
P <- matrix(c(mean(lat),mean(long)),nrow = 1, ncol = 2)
#(a)Compute the distance between P and the 1718 data points
#using the following distance measures: Euclidean distance,
#Mahalanobis distance, City block metric, Minkowski metric
#(for p=3), Chebyshev distance and Cosine distance.)
points <- matrix(c(lat,long),nrow = 1718, ncol = 2)
shift_points <- matrix(nrow = 1718, ncol = 2)
shift_points[,1] <- points[,1] - P[1,1]
shift_points[,2] <- points[,2] - P[1,2]
#Euclidean_dis <- sqrt(sum(shift_points*shift_points))
Euclidean_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(shift_points))
{
Euclidean_dis[i] <- sqrt(sum(shift_points[i,]*shift_points[i,]))
}
#mahalanobis distance
Maha_dis <- mahalanobis(points,P, cov(points))
#City block metric
shift_points[,1] <- abs(points[,1] - P[1,1])
shift_points[,2] <- abs(points[,2] - P[1,2])
City_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(shift_points))
{
City_dis[i] <- sum(shift_points[i,])
}
#Minkowski metric
Min_dis <- c(length = nrow(shift_points))
shift_points[,1] <- abs(points[,1] - P[1,1])
shift_points[,2] <- abs(points[,2] - P[1,2])
for(i in 1:nrow(shift_points)){
Min_dis[i] <- (shift_points[i,1]^3 + shift_points[i,2]^3)^(1/3)
}
#Chebyshev distance
shift_points[,1] <- abs(points[,1] - P[1,1])
shift_points[,2] <- abs(points[,2] - P[1,2])
Cheby_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(shift_points))
{
Cheby_dis[i] = max(shift_points[i,])
}
#Cosine Distance
Cos_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(points))
{
temp <- sum(points[i,]*P)
mode_a <- sqrt(sum(points[i,]*points[i,]))
mode_b <- sqrt(sum(P*P))
Cos_dis[i] <- temp/(mode_a*mode_b)
}
#==========================
#(b)For each distance measure, identify the 10 points from the
#   dataset that are the closest to the point P
#   (a) (10 points) Create plots, one for each distance measure.
#Place an âXâ for P and mark the 10 closest points. To mark them,
#you could place a circle or draw the line between
#these closest neighbors and the points âXâ.
#Make sure the points can be uniquely identified.
index <- order(Euclidean_dis)
ten_index <- head(index,10)
#plot(lat,long, xlab = "latitude", ylab = "longitude")
plot(lat,long, xlab = "latitude", ylab = "longitude", xlim = c(37,38))
points(P[1,1],P[1,2], col = "red", pch = "X")
points(points[ten_index,1],points[ten_index,2], col = "blue")
for(i in 1:length(ten_index))
{
x <- c(P[1,1],points[ten_index[i],1])
y <- c(P[1,2],points[ten_index[i],2])
lines(x,y,col ="green")
}
#(b)Verify if the set of points is the same across all the distance measures.
#solution: Compare all the ten_index
plot(locations.matrix$lat, locations.matrix$long, xlab = "Latitude", ylab = "Longitude")
View(locations.matrix)
View(locations)
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude")
P
P[1]
P[2]
points(P[1], P[2], col = "red", pch = "Zhewei")
points(P[1], P[2], col = "red", pch = "X")
Cheby.dist[1:10][1,]
Cheby.dist[1:10]
ten_index
index
?order
rm(list=ls())
#5. For this exercise, use the provided ”locations.csv” file, which contains a list
#of 1718 data instances. The file contains the migration information for a turkey vulture
#named ’Tesla’ for Fall 2013. (Source: movebank.org) There are 25 columns representing
#several properties, including the latitude and longitude positions of Tesla,GPS tag number, date, time, behavior etc. For the purpose of this exercise, we are concerned with
#the ’lat’ and ’long’ columns. Complete the following tasks:
#(a) Load the file and read ’lat’ and ’long’ columns.
locations <- read.csv("locations.csv", header = TRUE)
locations$lat
locations$long
#(b) Make a 2D plot and label the axes (latitude should be x-axis and longitude should be y-axis)
plot(locations$lat,
locations$long,
main = "Location distribution",
xlab = "Latitude",
ylab = "Longitude",
col = "blue")
#(c) Find the correlation between the dimensions
cor(locations$lat, locations$long)
#(d) Compute the mean of latitude and longitude values. Consider this point as P.
P <- matrix(c(mean(locations$lat), mean(locations$long)), nrow = 1, ncol = 2)
#Build locations matrix
locations.matrix <- matrix(c(locations$lat, locations$long), nrow = 1718, ncol = 2)
diff.dist <- matrix(data = NA, nrow = 1718, ncol = 2)
diff.dist[,1] <- locations.matrix[,1] - P[,1]
diff.dist[,2] <- locations.matrix[,2] - P[,2]
#(d.a) Compute the distance between P and the 1718 data points using the following distance measures:
#Euclidean distance
euc.dist <- c()
for (i in 1:nrow(diff.dist)) {
euc.dist[i] <- sqrt(sum(diff.dist[i,1] ^ 2, diff.dist[i,2] ^ 2))
}
euc.dist <- sort(euc.dist, decreasing = FALSE)
#Mahalanobis distance
mahala.dist <- mahalanobis(locations.matrix, P, cov(locations.matrix, locations.matrix))
mahala.dist <- sort(mahala.dist, decreasing = FALSE)
#City block metric (Manhattan distance)
city.block.dist <- c()
for (i in 1:nrow(diff.dist)) {
city.block.dist[i] <- sum(abs(diff.dist[i,1]), abs(diff.dist[i,2]))
}
city.block.dist <- sort(city.block.dist, decreasing = FALSE)
#Minkowski metric (for p=3)
Minkowski.dist <- c()
for (i in 1:nrow(diff.dist)) {
Minkowski.dist[i] <- sum(abs(diff.dist[i,1]) ^ 3, abs(diff.dist[i,2]) ^ 3) ^ (1 / 3)
}
Minkowski.dist <- sort(Minkowski.dist, decreasing = FALSE)
#Chebyshev distance
Cheby.dist <- c()
for (i in 1:nrow(diff.dist)) {
Cheby.dist[i] <- max(abs(diff.dist[i,1]), abs(diff.dist[i,2]))
}
Cheby.dist <- sort(Cheby.dist, decreasing = FALSE)
?order
order(Cheby.dist)
#5. For this exercise, use the provided ”locations.csv” file, which contains a list
#of 1718 data instances. The file contains the migration information for a turkey vulture
#named ’Tesla’ for Fall 2013. (Source: movebank.org) There are 25 columns representing
#several properties, including the latitude and longitude positions of Tesla,GPS tag number, date, time, behavior etc. For the purpose of this exercise, we are concerned with
#the ’lat’ and ’long’ columns. Complete the following tasks:
#(a) Load the file and read ’lat’ and ’long’ columns.
locations <- read.csv("locations.csv", header = TRUE)
locations$lat
locations$long
#(b) Make a 2D plot and label the axes (latitude should be x-axis and longitude should be y-axis)
plot(locations$lat,
locations$long,
main = "Location distribution",
xlab = "Latitude",
ylab = "Longitude",
col = "blue")
#(c) Find the correlation between the dimensions
cor(locations$lat, locations$long)
#(d) Compute the mean of latitude and longitude values. Consider this point as P.
P <- matrix(c(mean(locations$lat), mean(locations$long)), nrow = 1, ncol = 2)
#Build locations matrix
locations.matrix <- matrix(c(locations$lat, locations$long), nrow = 1718, ncol = 2)
diff.dist <- matrix(data = NA, nrow = 1718, ncol = 2)
diff.dist[,1] <- locations.matrix[,1] - P[,1]
diff.dist[,2] <- locations.matrix[,2] - P[,2]
#(d.a) Compute the distance between P and the 1718 data points using the following distance measures:
#Euclidean distance
euc.dist <- c()
for (i in 1:nrow(diff.dist)) {
euc.dist[i] <- sqrt(sum(diff.dist[i,1] ^ 2, diff.dist[i,2] ^ 2))
}
#euc.dist <- sort(euc.dist, decreasing = FALSE)
#Mahalanobis distance
mahala.dist <- mahalanobis(locations.matrix, P, cov(locations.matrix, locations.matrix))
mahala.dist <- sort(mahala.dist, decreasing = FALSE)
#City block metric (Manhattan distance)
city.block.dist <- c()
for (i in 1:nrow(diff.dist)) {
city.block.dist[i] <- sum(abs(diff.dist[i,1]), abs(diff.dist[i,2]))
}
#city.block.dist <- sort(city.block.dist, decreasing = FALSE)
#Minkowski metric (for p=3)
Minkowski.dist <- c()
for (i in 1:nrow(diff.dist)) {
Minkowski.dist[i] <- sum(abs(diff.dist[i,1]) ^ 3, abs(diff.dist[i,2]) ^ 3) ^ (1 / 3)
}
#Minkowski.dist <- sort(Minkowski.dist, decreasing = FALSE)
#Chebyshev distance
Cheby.dist <- c()
for (i in 1:nrow(diff.dist)) {
Cheby.dist[i] <- max(abs(diff.dist[i,1]), abs(diff.dist[i,2]))
}
#Cheby.dist <- sort(Cheby.dist, decreasing = FALSE)
#Cosine distance
cos.dist <- c()
for (i in 1:nrow(diff.dist)) {
numerator <- sum(locations.matrix[i,] * P)
denominator <- sqrt(sum(locations.matrix[i,] * locations.matrix[i,])) * sqrt(sum(P * P))
cos.dist[i] <- 1 - numerator / denominator
}
#cos.dist <- sort(cos.dist, decreasing = FALSE)
order(Cheby.dist)
order(Cheby.dist, decreasing = FALSE)[1:10]
order(Cheby.dist, decreasing = FALSE)[1:10][1,]
points(locations[ten.nearest.point,1], points(locations[ten.nearest.point,2]), col = "blue")
ten.nearesr.point
ten.nearest.point
ten.points -> order(Cheby.dist, decreasing = FALSE)[1:10]
ten.points -> order(Cheby.dist, decreasing = FALSE)[1:10]
ten.nearest.point <- order(Cheby.dist, decreasing = FALSE)[1:10]
ten.nearest.point
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude")
points(P[1], P[2], col = "red", pch = "X")
points(locations[ten.nearest.point,1], points(locations[ten.nearest.point,2]), col = "blue")
#(a) Load the file and read âlatâ and âlongâ columns.
loc_data <- read.csv("locations.csv")
lat <- loc_data$lat
long <- loc_data$long
#(b)Make a 2D plot and label the axes (latitude should be x-axis
#   and longitude should be y-axis)
plot(lat,long, xlab = "latitude", ylab = "longitude")
#(c) Find the correlation between the dimensions
cor(lat,long)
#(d) Compute the mean of latitude and longitude values. Consider this point as P.
P <- matrix(c(mean(lat),mean(long)),nrow = 1, ncol = 2)
#(a)Compute the distance between P and the 1718 data points
#using the following distance measures: Euclidean distance,
#Mahalanobis distance, City block metric, Minkowski metric
#(for p=3), Chebyshev distance and Cosine distance.)
points <- matrix(c(lat,long),nrow = 1718, ncol = 2)
shift_points <- matrix(nrow = 1718, ncol = 2)
shift_points[,1] <- points[,1] - P[1,1]
shift_points[,2] <- points[,2] - P[1,2]
#Euclidean_dis <- sqrt(sum(shift_points*shift_points))
Euclidean_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(shift_points))
{
Euclidean_dis[i] <- sqrt(sum(shift_points[i,]*shift_points[i,]))
}
#mahalanobis distance
Maha_dis <- mahalanobis(points,P, cov(points))
#City block metric
shift_points[,1] <- abs(points[,1] - P[1,1])
shift_points[,2] <- abs(points[,2] - P[1,2])
City_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(shift_points))
{
City_dis[i] <- sum(shift_points[i,])
}
#Minkowski metric
Min_dis <- c(length = nrow(shift_points))
shift_points[,1] <- abs(points[,1] - P[1,1])
shift_points[,2] <- abs(points[,2] - P[1,2])
for(i in 1:nrow(shift_points)){
Min_dis[i] <- (shift_points[i,1]^3 + shift_points[i,2]^3)^(1/3)
}
#Chebyshev distance
shift_points[,1] <- abs(points[,1] - P[1,1])
shift_points[,2] <- abs(points[,2] - P[1,2])
Cheby_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(shift_points))
{
Cheby_dis[i] = max(shift_points[i,])
}
#Cosine Distance
Cos_dis <- c(length(nrow(shift_points)))
for(i in 1:nrow(points))
{
temp <- sum(points[i,]*P)
mode_a <- sqrt(sum(points[i,]*points[i,]))
mode_b <- sqrt(sum(P*P))
Cos_dis[i] <- temp/(mode_a*mode_b)
}
#==========================
#(b)For each distance measure, identify the 10 points from the
#   dataset that are the closest to the point P
#   (a) (10 points) Create plots, one for each distance measure.
#Place an âXâ for P and mark the 10 closest points. To mark them,
#you could place a circle or draw the line between
#these closest neighbors and the points âXâ.
#Make sure the points can be uniquely identified.
index <- order(Euclidean_dis)
ten_index <- head(index,10)
#plot(lat,long, xlab = "latitude", ylab = "longitude")
plot(lat,long, xlab = "latitude", ylab = "longitude", xlim = c(37,38))
points(P[1,1],P[1,2], col = "red", pch = "X")
points(points[ten_index,1],points[ten_index,2], col = "blue")
for(i in 1:length(ten_index))
{
x <- c(P[1,1],points[ten_index[i],1])
y <- c(P[1,2],points[ten_index[i],2])
lines(x,y,col ="green")
}
#(b)Verify if the set of points is the same across all the distance measures.
#solution: Compare all the ten_index
ten_index
order(Cheby.dist, decreasing = FALSE)[1:10]
head(index,10)
order(Cheby.dist, decreasing = FALSE)[1:10]
order(Cheby_disdist, decreasing = FALSE)[1:10]
order(Cheby_dist, decreasing = FALSE)[1:10]
order(Cheby_dis, decreasing = FALSE)[1:10]
ten_index
ten.nearest.point <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude")
points(P[1], P[2], col = "red", pch = "X")
points(locations[ten.nearest.point,1], locations(locations[ten.nearest.point,2]), col = "blue")
#Make sure the points can be uniquely identified.
ten.nearest.point <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point,1], locations.matrix[ten.nearest.point,2], col = "blue")
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
ten.nearest.point <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point,1], locations.matrix[ten.nearest.point,2], col = "blue")
require(plotrix)
install.packages(plotrix)
#Draw circle
install.packages("plotrix")
require("plotrix")
draw.circle(P[1], P[2], Cheby.dist[10])
draw.circle(P[1], P[2], sort(Cheby.dist)[10])
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
install.packages("plotrix")
require("plotrix")
draw.circle(P[1], P[2], sort(Cheby.dist)[10])
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
draw.circle(P[1], P[2], sort(Cheby.dist)[10])
ten.nearest.point.Cheby
sort(Cheby.dist)[10]
locations.matrix[1109]
locations.matrix[1109,]
ten.nearest.point.Cheby[10]
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]))
draw.circle(P[1], P[2], radius)
radius
P
locations.matrix[1110,]
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
draw.circle(P[1], P[2], radius)
locations.matrix[ten.nearest.point.Cheby]
P
locations.matrix[ten.nearest.point.Cheby,]
P
radius
draw.circle(P[1], P[2], radius)
draw.circle(P[1], P[2], radius)
#(d.b.b) Verify if the set of points is the same across all the distance
#measures.
draw.circle(P[1], P[2], radius)
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
draw.circle(P[1], P[2], radius)
P[1]
p[2]
p[2]P[2]
P[2]
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
draw.circle(P[1], P[2], 1)
rm(list=ls())
#5. For this exercise, use the provided ”locations.csv” file, which contains a list
#of 1718 data instances. The file contains the migration information for a turkey vulture
#named ’Tesla’ for Fall 2013. (Source: movebank.org) There are 25 columns representing
#several properties, including the latitude and longitude positions of Tesla,GPS tag number, date, time, behavior etc. For the purpose of this exercise, we are concerned with
#the ’lat’ and ’long’ columns. Complete the following tasks:
install.packages("plotrix")
require("plotrix")
#(a) Load the file and read ’lat’ and ’long’ columns.
locations <- read.csv("locations.csv", header = TRUE)
locations$lat
locations$long
#(b) Make a 2D plot and label the axes (latitude should be x-axis and longitude should be y-axis)
plot(locations$lat,
locations$long,
main = "Location distribution",
xlab = "Latitude",
ylab = "Longitude",
col = "blue")
#(c) Find the correlation between the dimensions
cor(locations$lat, locations$long)
#(d) Compute the mean of latitude and longitude values. Consider this point as P.
P <- matrix(c(mean(locations$lat), mean(locations$long)), nrow = 1, ncol = 2)
#Build locations matrix
locations.matrix <- matrix(c(locations$lat, locations$long), nrow = 1718, ncol = 2)
diff.dist <- matrix(data = NA, nrow = 1718, ncol = 2)
diff.dist[,1] <- locations.matrix[,1] - P[,1]
diff.dist[,2] <- locations.matrix[,2] - P[,2]
#(d.a) Compute the distance between P and the 1718 data points using the following distance measures:
#Euclidean distance
euc.dist <- c()
for (i in 1:nrow(diff.dist)) {
euc.dist[i] <- sqrt(sum(diff.dist[i,1] ^ 2, diff.dist[i,2] ^ 2))
}
#euc.dist <- sort(euc.dist, decreasing = FALSE)
#Mahalanobis distance
mahala.dist <- mahalanobis(locations.matrix, P, cov(locations.matrix, locations.matrix))
mahala.dist <- sort(mahala.dist, decreasing = FALSE)
#City block metric (Manhattan distance)
city.block.dist <- c()
for (i in 1:nrow(diff.dist)) {
city.block.dist[i] <- sum(abs(diff.dist[i,1]), abs(diff.dist[i,2]))
}
#city.block.dist <- sort(city.block.dist, decreasing = FALSE)
#Minkowski metric (for p=3)
Minkowski.dist <- c()
for (i in 1:nrow(diff.dist)) {
Minkowski.dist[i] <- sum(abs(diff.dist[i,1]) ^ 3, abs(diff.dist[i,2]) ^ 3) ^ (1 / 3)
}
#Minkowski.dist <- sort(Minkowski.dist, decreasing = FALSE)
#Chebyshev distance
Cheby.dist <- c()
for (i in 1:nrow(diff.dist)) {
Cheby.dist[i] <- max(abs(diff.dist[i,1]), abs(diff.dist[i,2]))
}
#Cheby.dist <- sort(Cheby.dist, decreasing = FALSE)
#Cosine distance
cos.dist <- c()
for (i in 1:nrow(diff.dist)) {
numerator <- sum(locations.matrix[i,] * P)
denominator <- sqrt(sum(locations.matrix[i,] * locations.matrix[i,])) * sqrt(sum(P * P))
cos.dist[i] <- 1 - numerator / denominator
}
#cos.dist <- sort(cos.dist, decreasing = FALSE)
#(d.b) For each distance measure, identify the 10 points from the dataset that are the closest to the point P
#(d.b.a) Create plots, one for each distance measure. Place an ’X’ for P and mark the 10 closest points.
#To mark them, you could place a circle or draw the line between these closest neighbors and the points ’X’.
#Make sure the points can be uniquely identified.
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
draw.circle(P[1], P[2], 1)
#(d.b.b) Verify if the set of points is the same across all the distance
#measures.
install.packages("plotrix")
draw.circle(P[1], P[2], 1)
draw.circle(P[1], P[2], 100)
draw.circle(P[1], P[2], 1, nv=100,border=NULL,col=NA,lty=1,lwd=1)
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
ten.nearest.point.Cheby <- order(Cheby.dist, decreasing = FALSE)[1:10]
plot(locations$lat, locations$long, xlab = "Latitude", ylab = "Longitude", col = "white")
points(P[1], P[2], col = "red", pch = "X")
points(locations.matrix[ten.nearest.point.Cheby,1], locations.matrix[ten.nearest.point.Cheby,2], col = "blue")
#Draw circle
radius <- sqrt((P[1] - locations.matrix[ten.nearest.point.Cheby[10],1]) ^ 2 + (P[2] - locations.matrix[ten.nearest.point.Cheby[10],2]) ^ 2)
draw.circle(P[1], P[2], 1, nv=100,border=NULL,col=NA,lty=1,lwd=1)
draw.circle(P[1], P[2], 100, nv=100,border=NULL,col=NA,lty=1,lwd=1)
draw.circle(P[1], P[2], 100, nv=100,border=NULL,col=NA,lty=1,lwd=1)
